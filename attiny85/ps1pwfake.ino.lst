
/tmp/arduino_build_702323/ps1pwfake.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
__trampolines_start():
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
__do_copy_data():
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ec       	ldi	r30, 0xC8	; 200
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
__do_clear_bss():
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 37       	cpi	r26, 0x71	; 113
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
.do_clear_bss_start():
  50:	4c d0       	rcall	.+152    	; 0xea <main>
  52:	b8 c0       	rjmp	.+368    	; 0x1c4 <_exit>

00000054 <__bad_interrupt>:
__vector_1():
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_5>:
__vector_5():
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	3f 93       	push	r19
  64:	8f 93       	push	r24
  66:	9f 93       	push	r25
  68:	af 93       	push	r26
  6a:	bf 93       	push	r27
  6c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <millis_timer_millis>
  70:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <millis_timer_millis+0x1>
  74:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <millis_timer_millis+0x2>
  78:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <millis_timer_millis+0x3>
  7c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <millis_timer_fract>
  80:	26 e0       	ldi	r18, 0x06	; 6
  82:	23 0f       	add	r18, r19
  84:	2d 37       	cpi	r18, 0x7D	; 125
  86:	30 f0       	brcs	.+12     	; 0x94 <__vector_5+0x3e>
  88:	29 e8       	ldi	r18, 0x89	; 137
  8a:	23 0f       	add	r18, r19
  8c:	03 96       	adiw	r24, 0x03	; 3
  8e:	a1 1d       	adc	r26, r1
  90:	b1 1d       	adc	r27, r1
  92:	03 c0       	rjmp	.+6      	; 0x9a <__vector_5+0x44>
  94:	02 96       	adiw	r24, 0x02	; 2
  96:	a1 1d       	adc	r26, r1
  98:	b1 1d       	adc	r27, r1
  9a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <millis_timer_fract>
  9e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <millis_timer_millis>
  a2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <millis_timer_millis+0x1>
  a6:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <millis_timer_millis+0x2>
  aa:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <millis_timer_millis+0x3>
  ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  b2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  b6:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
  ba:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	a1 1d       	adc	r26, r1
  c2:	b1 1d       	adc	r27, r1
  c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  cc:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
  d0:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
  d4:	bf 91       	pop	r27
  d6:	af 91       	pop	r26
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <main>:
main():
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
  ea:	23 e0       	ldi	r18, 0x03	; 3
  ec:	2a bd       	out	0x2a, r18	; 42
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
  ee:	23 bf       	out	0x33, r18	; 51
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
  f0:	78 94       	sei
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1167

  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
  f2:	29 b7       	in	r18, 0x39	; 57
  f4:	22 60       	ori	r18, 0x02	; 2
  f6:	29 bf       	out	0x39, r18	; 57
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:958
    #elif defined(__AVR_ATtiny43__)
      TCCR1A = 3; //WGM 10=1, WGM11=1
      TCCR1B = 3; //prescaler of 64
    #elif (TIMER_TO_USE_FOR_TONE == 1) && defined(TCCR1) // ATtiny x5
      // Use the Tone Timer for fast PWM as phase correct not supported by this timer
      GTCCR = (1<<PWM1B);
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	2c bd       	out	0x2c, r18	; 44
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:959
      OCR1C = 0xFF; //Use 255 as the top to match with the others as this module doesn't have a 8bit PWM mode.
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	2d bd       	out	0x2d, r18	; 45
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:960
      TCCR1 = (1<<CTC1) | (1<<PWM1A) | (ToneTimer_Prescale_Index << CS10);
 100:	27 ec       	ldi	r18, 0xC7	; 199
 102:	20 bf       	out	0x30, r18	; 48
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 104:	26 e8       	ldi	r18, 0x86	; 134
 106:	26 b9       	out	0x06, r18	; 6
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:75

bool          PWR_ST           = false;// computer is off.
bool          longPressActive  = false;// is are we in the middle of a long press.

void setup() {
  bitClear(DDRB, PWR_SW);   // Set switch pin to input
 108:	ba 98       	cbi	0x17, 2	; 23
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:76
  bitSet(PORTB, PWR_SW);    // enable internal pullup, switch wired to ground and this pin.
 10a:	c2 9a       	sbi	0x18, 2	; 24
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:79
                            // pull up is VERY weak and will pull to ground quickly 

  bitClear(DDRB, PWR_ON);  //Set PWR_ON to input
 10c:	b9 98       	cbi	0x17, 1	; 23
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:80
  bitClear(PORTB, PWR_ON); //clear pullup - input is high Z
 10e:	c1 98       	cbi	0x18, 1	; 24
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:110
        }
        // turn off the computer
        else {
           bitClear(DDRB, PWR_ON); //set PWR_ON to input (high Z)
           PWR_ST = false; // update power state
           longPressActive = true; // user may still be holding button down
 110:	21 e0       	ldi	r18, 0x01	; 1
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:87

}

void loop() {
  // check the status of PWR_SW forever.
   int switchState = bitRead(PINB, PWR_SW); // read the state of the switch into a local variable
 112:	36 b3       	in	r19, 0x16	; 22
 114:	32 fb       	bst	r19, 2
 116:	88 27       	eor	r24, r24
 118:	80 f9       	bld	r24, 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:90
    
   // check if switch is not the same as last time, start counter over if so
   if (switchState != lastSwState) {
 11c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	84 17       	cp	r24, r20
 126:	95 07       	cpc	r25, r21
 128:	a1 f1       	breq	.+104    	; 0x192 <main+0xa8>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
 12a:	3f b7       	in	r19, 0x3f	; 63
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
 12c:	f8 94       	cli
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:346
    m = millis_timer_millis;
 12e:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <millis_timer_millis>
 132:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <millis_timer_millis+0x1>
 136:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <millis_timer_millis+0x2>
 13a:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <millis_timer_millis+0x3>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:347
    SREG = oldSREG;
 13e:	3f bf       	out	0x3f, r19	; 63
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:91
      lastDebounceTime = millis();
 140:	40 93 6d 00 	sts	0x006D, r20	; 0x80006d <lastDebounceTime>
 144:	50 93 6e 00 	sts	0x006E, r21	; 0x80006e <lastDebounceTime+0x1>
 148:	60 93 6f 00 	sts	0x006F, r22	; 0x80006f <lastDebounceTime+0x2>
 14c:	70 93 70 00 	sts	0x0070, r23	; 0x800070 <lastDebounceTime+0x3>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:92
      longPressActive = false;
 150:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <longPressActive>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:96
   }

   // if the switch is down, and has been triggered we wait for it to change back to down again.
   if ((switchState == LOW) && (longPressActive == false)) {
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	89 f5       	brne	.+98     	; 0x1ba <main+0xd0>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:341
  }

  unsigned long millis()
  {
    unsigned long m;
    uint8_t oldSREG = SREG;
 158:	3f b7       	in	r19, 0x3f	; 63
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:345

    // disable interrupts while we read millis_timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
    cli();
 15a:	f8 94       	cli
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:346
    m = millis_timer_millis;
 15c:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <millis_timer_millis>
 160:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <millis_timer_millis+0x1>
 164:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <millis_timer_millis+0x2>
 168:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <millis_timer_millis+0x3>
/home/david/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tiny/wiring.c:347
    SREG = oldSREG;
 16c:	3f bf       	out	0x3f, r19	; 63
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:99
     
      // check to see if its a legitimate button press
      if ((millis() - lastDebounceTime) > debounceDelay) {
 16e:	c0 90 6d 00 	lds	r12, 0x006D	; 0x80006d <lastDebounceTime>
 172:	d0 90 6e 00 	lds	r13, 0x006E	; 0x80006e <lastDebounceTime+0x1>
 176:	e0 90 6f 00 	lds	r14, 0x006F	; 0x80006f <lastDebounceTime+0x2>
 17a:	f0 90 70 00 	lds	r15, 0x0070	; 0x800070 <lastDebounceTime+0x3>
 17e:	4c 19       	sub	r20, r12
 180:	5d 09       	sbc	r21, r13
 182:	6e 09       	sbc	r22, r14
 184:	7f 09       	sbc	r23, r15
 186:	47 39       	cpi	r20, 0x97	; 151
 188:	51 05       	cpc	r21, r1
 18a:	61 05       	cpc	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	40 f4       	brcc	.+16     	; 0x1a0 <main+0xb6>
 190:	14 c0       	rjmp	.+40     	; 0x1ba <main+0xd0>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:96
      lastDebounceTime = millis();
      longPressActive = false;
   }

   // if the switch is down, and has been triggered we wait for it to change back to down again.
   if ((switchState == LOW) && (longPressActive == false)) {
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	91 f4       	brne	.+36     	; 0x1ba <main+0xd0>
 196:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <longPressActive>
 19a:	31 11       	cpse	r19, r1
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <main+0xd0>
 19e:	dc cf       	rjmp	.-72     	; 0x158 <main+0x6e>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:101
     
      // check to see if its a legitimate button press
      if ((millis() - lastDebounceTime) > debounceDelay) {
        // turn on the computer
        if (PWR_ST == false) {  // is off
 1a0:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <PWR_ST>
 1a4:	31 11       	cpse	r19, r1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <main+0xc6>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:102
           bitSet(DDRB, PWR_ON); // set PWR_ON to output (ground)
 1a8:	b9 9a       	sbi	0x17, 1	; 23
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:103
           PWR_ST = true; // update power state
 1aa:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <PWR_ST>
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <main+0xcc>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:108
           longPressActive = true; // user may still be holding button down
        }
        // turn off the computer
        else {
           bitClear(DDRB, PWR_ON); //set PWR_ON to input (high Z)
 1b0:	b9 98       	cbi	0x17, 1	; 23
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:109
           PWR_ST = false; // update power state
 1b2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <PWR_ST>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:110
           longPressActive = true; // user may still be holding button down
 1b6:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <longPressActive>
/home/david/Arduino/ps1pwfake/ps1pwfake.ino:114
        }
      }
   }
   lastSwState = switchState;    // save the previus state 
 1ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	a7 cf       	rjmp	.-178    	; 0x112 <main+0x28>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
